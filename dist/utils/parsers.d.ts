import * as Proxy from './proxy';
import * as Rule from './rule';
export declare function getProxies(): Promise<void>;
export declare function getSinglePaylaod(url: string, name: string): Promise<Map<string, Rule.PayloadRule[]>>;
export declare function getRulePayload(): Promise<void>;
export declare function parseProxies(proxies: Array<any>): Array<Proxy.BaseProxy>;
export declare function parseProxyGroups(proxyGroups: Array<any>): Array<Proxy.BaseProxyGroup>;
export declare function parseSingleRule(payload: string): Rule.SingleRule;
export declare function parseRulePayload(payload: Array<any>): Array<Rule.PayloadRule>;
export declare function filterByDstLoc(proxies: Array<Proxy.BaseProxy>, key: string): Array<Proxy.BaseProxy>;
export declare function filterBySrcLoc(proxies: Array<Proxy.BaseProxy>, key: string): Array<Proxy.BaseProxy>;
export declare function testFilterProxies(proxies: Array<Proxy.BaseProxy>): void;
export declare function filterProxies(proxies: Array<Proxy.BaseProxy>): void;
export declare function adaptRule(payload: Rule.PayloadRule, strategy: string): Rule.SingleRule;
export declare function adaptRules(payload: Array<Rule.PayloadRule> | undefined, strategy: string): Array<Rule.SingleRule>;
export declare function processRule(): void;
export declare function processGroup(input: Array<Proxy.BaseProxyGroup>): void;
export declare function fillGroup(input: Array<Proxy.BaseProxyGroup>): void;
export declare function fillProxies(input: Array<Proxy.BaseProxy>): void;
export declare function fillRules(input: Array<Rule.SingleRule>): void;
